import ("./IceSDK.gni") # Helper functions
import ("//build/unity_build.gni") # Unity builds

declare_args() {
    use_glfw = true
    use_sdl2 = false
}

unity_lib("IceSDK") {
    sources = [
        "GameBase.cc",

        #######################################################
        #                      Assets                         #
        #######################################################
        "Assets/AssetFile.cc",
        "Assets/AssetManager.cc",
        "Assets/AudioAsset.cc",
        "Assets/ShaderAsset.cc",
        "Assets/TextAsset.cc",
        "Assets/Texture2DAsset.cc",

        #######################################################
        #                       Audio                         #
        #######################################################
        "Audio/Sound.cc",
        "Audio/AudioSystem.cc",

        #######################################################
        #                        ECS                          #
        #######################################################
        "ECS/Entity.cc",
        "ECS/Scene.cc",
        "ECS/System.cc",

        "ECS/Systems/CameraSystem.cc",
        "ECS/Systems/TransformSystem.cc",

        #######################################################
        #                     Graphics                        #
        #######################################################
        "Graphics/Window.cc",
        "Graphics/Texture2D.cc",
        "Graphics/GraphicsEntityHelper.cc",

        "Graphics/Shaders/ShaderManager.cc",

        "Graphics/SpriteBatch/SpriteBatch.cc",

        "Graphics/Tilesheet/Tilesheet.cc",
        
        "Graphics/TextureAtlas/Packer.cc",
        "Graphics/TextureAtlas/TextureAtlas.cc",

        "Graphics/Systems/SpriteRenderingSystem.cc",

        "Graphics/ImGui/bgfx_imgui.cc",
#       "ImGui/Widgets/AssetBrowser.cc",
        "Graphics/ImGui/Widgets/SceneGraph.cc",

        #######################################################
        #                       Input                         #
        #######################################################
        "Input/InputPipeline.cc",
        "Input/Systems/MouseInputSystem.cc",
        "Input/Systems/KeyboardInputSystem.cc",
        
        #######################################################
        #                       Utils                         #
        #######################################################
        "Utils/FileSystem.cc",
        "Utils/Logger.cc",
    ]
    include_dirs = [
        "//IceSDK",

        #######################################################
        #                       Audio                         #
        #######################################################
        "//third-party/fmod/inc", # FMOD

        #######################################################
        #                      Graphics                       #
        #######################################################
        "//third-party/bgfx/include", "//third-party/bimg/include", "//third-party/bx/include", # BGFX
        "//third-party/glfw/include", # GLFW
        "//third-party/sdl2/include", # SDL2
        "//third-party/imgui", # ImGui
        "//third-party/freetype/include", # FREETYPE 2

        
        #######################################################
        #                        Maths                        #
        #######################################################
        "//third-party/glm",  # GLM

        #######################################################
        #                     Utilities                       #
        #######################################################
        "//third-party/entt/single_include", # ENTT
    ]
    defines      = [
    ]

    precompiled_header = "pch.h"
    precompiled_source = "pch.cc"
    
    # Platform specific defines
    # use GLFW for desktop devices
    # use SDL2 for mobile devices
    if (is_win) {
        defines += [ "ICESDK_WIN32" ]
    }

    if (is_linux) {
        defines += [ "ICESDK_LINUX" ]
    }

    if (is_mac) {
        defines += [ "ICESDK_OSX" ]
    }

    if (is_win || is_linux || is_mac) {
        defines += [ "ICESDK_DESKTOP", "ICESDK_FMOD" ] # Which audio system to use. TODO: Add more audio systems
    }

    if (is_android) {
        defines += [ "ICESDK_ANDROID" ]
        use_glfw = false
        use_sdl2 = true
    }

    # Platform specific headers for bgfx
    if (is_win) {
        include_dirs += [ "//third-party/bx/include/compat/msvc" ]
    }

    if (is_mac) {
        include_dirs += [ "//third-party/bx/include/compat/osx" ]
    }

    # For native binaries that we have no access on
    lib_ext = ""
    lib_prefix = ""
    if (is_win) {
        lib_ext = "lib"
        lib_prefix = ""
    }
    
    if (is_linux) {
        lib_ext = "so.12.4"
        lib_prefix = "lib"
    }

    libs = [ "//third-party/fmod/lib/$target_os/$target_cpu/"+lib_prefix+"fmod.$lib_ext" ]

    deps = [
        "//third-party/bgfx",
        "//third-party/bimg",
        "//third-party/bx",
        "//third-party/freetype",
    ]

    if (is_android) { # TODO: figure out how to link fmod with android
        libs = [  ]
    } else {
        deps += [ ":fmod" ]  # Copy fmod library to our output dir 
    }

    if (is_android) {
        libs += [ "Android", "log" ]
    }
    
    if (use_glfw) {
        defines += [ "ICESDK_GLFW" ]
        deps += [ "//third-party/glfw", "//third-party/imgui/glfw:imgui" ]
    }

    if (use_sdl2) {
        defines += [ "ICESDK_SDL2" ]
        deps += [ "//third-party/sdl2", "//third-party/imgui/sdl2:imgui" ]

        if (is_linux) {
            defines += [ "SDL_VIDEO_DRIVER_X11" ]
        }
    }

    if (is_posix) {
        #defines += [ "HAVE_PTHREAD" ]
        #libs += [ "pthread" ]
    }
}


if (is_win) {
    copy("fmod") {
        sources = [ "//third-party/fmod/lib/$target_os/$target_cpu/fmod.dll" ]
        outputs = [ "$root_out_dir/fmod.dll" ]
    }
}

if (is_linux) {
    copy("fmod") {
        sources = [ "//third-party/fmod/lib/$target_os/$target_cpu/libfmod.so.12.4" ]
        outputs = [ "$root_out_dir/libfmod.so.12" ]
    }
}

if (is_emscripten) {
    static_library("fmod") { }
}
