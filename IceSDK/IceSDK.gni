if (is_clang) {
    import("//build/toolchain/clang.gni")
}

template("IceSDK_Project") {
    if (!defined(invoker.assets)) {
        invoker.assets = [  ]
    }

    action("Assets_$target_name") {
        script = "//tools/compile_assets.py"
        args = [ host_os, rebase_path(root_build_dir), rebase_path(".", root_build_dir) ]

        inputs = invoker.assets

        outputs = [ "$target_out_dir/Assets/0.ice" ]
    }

    if (is_android) {
        shared_library(target_name) {
            forward_variables_from(invoker, "*")

            if (!defined(include_dirs)) {
                include_dirs = [ ]
            }

            if (!defined(defines)) {
                defines = [ ]
            }

            if (!defined(cflags_cc)) {
                cflags_cc = [ ]
            }

            if (!defined(deps)) {
                deps = [ ]
            }

            if (!defined(ldflags)) {
                ldflags = [ ]
            }

            if (!defined(libs)) {
                libs = [ ]
            }

            if (!defined(arflags)) {
                arflags = [ ]
            }

            include_dirs += [ "//IceSDK" ]

            if (is_android) {
                defines += [ "ICESDK_ANDROID", "__ANDROID__" ]
            }

            # FMOD
            defines += [ "ICESDK_FMOD" ]

            # BGFX
            include_dirs += [ "//third-party/bgfx/include", "//third-party/bimg/include", "//third-party/bx/include", "//third-party/glfw/include" ]

            exec_script("//tools/compile_assets.py", [ host_os, rebase_path(root_build_dir), rebase_path(".", root_build_dir) ])

            include_dirs += [
                "//third-party/fmod/inc",
                "//third-party/bgfx/include", "//third-party/bimg/include", "//third-party/bx/include",
                "//third-party/glfw/include", "//third-party/entt/single_include", "//third-party/glm", 
                "//third-party/imgui", "//third-party/sdl2/include", "//third-party/spdlog/include",
                "//third-party/freetype/include", "//third-party/harfbuzz/src",
            ]

            deps += [
                "//IceSDK:IceSDK",
            ]

            libs += [ "stdc++" ]

            # HarfBuzz
            defines += [
                "HAVE_FREETYPE",
                "HB_NO_GETENV", # incompatible with spdlog
                "HAVE_ICU"
            ]
            defines += [ "HAVE_PTHREAD" ]
            libs += [ "pthread" ]
        }
    } else {
        orig_target_name = target_name

        if (is_emscripten) {
            action("GenHTML_$target_name") {
                script = "//tools/generate_html.py"
                args = [ orig_target_name ]

                outputs = [ "$target_out_dir/$orig_target_name.html" ]

                deps = [
                    ":CompileFileSystem_$orig_target_name"
                ]
            }

            action("CompileFileSystem_$target_name") {
                script = "$clang_base_path/emscripten/tools/file_packager.py"
                args = [ "$orig_target_name.fs.data", "--lz4", "--preload", rebase_path("//" + root_build_dir + "/Assets"), "--js-output=$orig_target_name.fs.js" ]
            
                outputs = [ "$target_out_dir/$orig_target_name.fs.data" ]

                deps = [
                    ":Assets_$orig_target_name"
                ]
            }
        }

        executable(target_name) {
            forward_variables_from(invoker, "*")

            if (!defined(include_dirs)) {
                include_dirs = [ ]
            }

            if (!defined(defines)) {
                defines = [ ]
            }

            if (!defined(cflags_cc)) {
                cflags_cc = [ ]
            }

            if (!defined(deps)) {
                deps = [ ]
            }

            if (!defined(ldflags)) {
                ldflags = [ ]
            }

            if (!defined(arflags)) {
                arflags = [ ]
            }

            include_dirs += [ "//IceSDK" ]

            if (is_win) {
                defines += [ "ICESDK_WIN32" ]
            }

            if (is_linux) {
                defines += [ "ICESDK_LINUX" ]
            }

            if (is_mac) {
                defines += [ "ICESDK_OSX" ]
            }

            # FMOD
            defines += [ "ICESDK_FMOD" ]

            # BGFX
            include_dirs += [ "//third-party/bgfx/include", "//third-party/bimg/include", "//third-party/bx/include", "//third-party/glfw/include" ]

            if (is_win) {
                include_dirs += [ "//third-party/bx/include/compat/msvc" ]
            }

            if (is_mac) {
                include_dirs += [ "//third-party/bx/include/compat/osx" ]
            }

            include_dirs += [
                "//third-party/fmod/inc",
                "//third-party/bgfx/include", "//third-party/bimg/include", "//third-party/bx/include",
                "//third-party/glfw/include", "//third-party/entt/single_include", "//third-party/glm", 
                "//third-party/imgui", "//third-party/sdl2/include", "//third-party/spdlog/include",
                "//third-party/freetype/include", "//third-party/harfbuzz/src", "//third-party/icu/source/common",
                "//third-party/icu/source/i18n"
            ]

            deps += [
                "//IceSDK:IceSDK",
                ":Assets_$orig_target_name"           
            ]

            if (is_emscripten) {
                deps += [ ":CompileFileSystem_$orig_target_name" ]
            }

            if (is_emscripten) {
                emscripten_flags = [
                    "-sWASM=1",
                    "-sUSE_SDL=2",
                    # "-sLEGACY_GL_EMULATION=1",

                    "-sMIN_WEBGL_VERSION=2",
                    "-sMAX_WEBGL_VERSION=2",

                    "-sUSE_WEBGL2=1",

                    "-sTOTAL_MEMORY=1024MB",
                    "-sOFFSCREENCANVAS_SUPPORT=1",
                    "-sDEMANGLE_SUPPORT=1",

                    "-sASSERTIONS=0",

                    "-sFILESYSTEM=1",
                    "-sFORCE_FILESYSTEM=1",
                    "-sLZ4=1",

                    "-sEXTRA_EXPORTED_RUNTIME_METHODS=[\"cwrap\"]",
                ]

                emscripten_ldflags = [
                    "--source-map-base http://127.0.0.1:5500/out/",
                    "--emit-symbol-map",
                    "--profiling",
                    "-g0"
                ]

                ldflags += emscripten_flags
                ldflags += emscripten_ldflags

                cflags_cc += emscripten_flags
            }

            # HarfBuzz
            defines += [
                "HAVE_FREETYPE",
                "HB_NO_GETENV", # incompatible with spdlog
                "HAVE_ICU"
            ]
            if (is_posix && !is_emscripten) {
                defines += [ "HAVE_PTHREAD" ]
            }

            if (is_emscripten) {
                defines += [ "HB_NO_MT" ]
            }
        }
    }
}

template ("IceSDK_Test") {
    IceSDK_Project("Test" + target_name) {
        forward_variables_from(invoker, "*")
        
        sources += [ "//Tests/Test.cc" ]

        if (!defined(include_dirs)) {
            include_dirs = [ ]
        }

        if (!defined(defines)) {
            defines = [ ]
        }

        if (!defined(cflags_cc)) {
            cflags_cc = [ ]
        }

        if (!defined(deps)) {
            deps = [ ]
        }

        include_dirs += [
            "//third-party/googletest/googletest/include",
            "//third-party/googletest/googlemock/include"
        ]
        deps += [
            "//third-party/googletest/googletest",
            "//third-party/googletest/googlemock"
        ]
    }
}

template ("IceSDK_Benchmark") {
    IceSDK_Project("Benchmark" + target_name) {
        forward_variables_from(invoker, "*")
        
        sources += [ "//Benchmarks/Benchmark.cc" ]

        if (!defined(include_dirs)) {
            include_dirs = [ ]
        }

        if (!defined(defines)) {
            defines = [ ]
        }

        if (!defined(cflags_cc)) {
            cflags_cc = [ ]
        }

        if (!defined(deps)) {
            deps = [ ]
        }

        include_dirs += [
            "//third-party/gbenchmark/include",
        ]
        deps += [
            "//third-party/gbenchmark",
        ]
    }
}
